#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


#allowd origins for CORS
sparql.allow_origin = *


# select the SPARQL evaluation strategy to use (default: sesame); other settings than "sesame" allow to translate
# SPARQL queries directly to database queries; more efficient but not tested extensively
sparql.strategy = native


# turn on/off fallback to Sesame in-memory SPARQL evaluation in case the default evaluation strategy fails for
# whatever reason; this is a safe-guard option to always yield the correct results, but suffers the memory
# and performance problems of the in-memory SPARQL evaulation
sparql.fallback = true

# select the way literal types are handled in SPARQL queries in case they are not correctly stored in the database
# or not properly given in the query; value "strict" means that the evaluator always tries to cast a type
# appropriately, but can result in considerable performance impacts; value "loose" means that all possible
# types are used, ignoring the type specification; value "none" means that no type casting takes place, types
# are used as given by the user (this is the most efficient setting, but may be less tolerant to faulty data or queries)
sparql.native.casttype = none


# log SQL statements to the lmf-main.log file for testing and debugging
sparql.native.logsql = false


# preload constant nodes in SPARQL expressions using the triple store functionality; constant values in SPARQL
# expressions are substituted with the database ID of the respective nodes; setting this option to true
# will reduce significantly the number of joins needed for a SPARQL query, but can require database access at
# query construction time.
sparql.native.preload_constants = true

# interpret the SPARQL REDUCED query parameter as distinct; the specification for REDUCED says it is left to the
# query optimizer whether to make results distinct or not; DISTINCT in SQL can introduce significant computational
# overhead, so the default is false
sparql.native.reduced_as_distinct = false
